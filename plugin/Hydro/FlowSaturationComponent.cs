using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using Grasshopper;
using Grasshopper.Kernel;
using Grasshopper.Kernel.Geometry;
using Grasshopper.Kernel.Geometry.Voronoi;
using groundhog.Properties;
using Rhino.Display;
using Rhino.Geometry;

namespace groundhog
{
    public class GroundhogSaturationComponent : GroundHogComponent
    {
        public GroundhogSaturationComponent()
            : base("Flow Saturation", "Saturation", "Identify the saturation levels across terrain given flow paths", "Groundhog",
                "Hydro")
        {
        }

        public override GH_Exposure Exposure => GH_Exposure.primary;

        protected override Bitmap Icon => Resources.icon_flows_saturation;

        public override Guid ComponentGuid => new Guid("{48cae0b9-2c40-4030-92de-4e622db09f88}");

        protected override void RegisterInputParams(GH_InputParamManager pManager)
        {
            pManager.AddCurveParameter("Flow Paths", "C", "The flow paths as generated by the flows component",
                GH_ParamAccess.list);
            pManager[0].Optional = false;
            pManager.AddNumberParameter("Start Volume", "T",
                "The quantity of water that each path 'starts with'", GH_ParamAccess.item);
            pManager[1].Optional = true;
            pManager.AddNumberParameter("Segment Loss", "T",
                "The decimal percent (e.g. 0.15 for 15%) of the initial volume that is lost in each segment", GH_ParamAccess.item);
            pManager[1].Optional = true;
        }

        protected override void RegisterOutputParams(GH_OutputParamManager pManager)
        {

        }

        protected override void GroundHogSolveInstance(IGH_DataAccess DA)
        {
            var FLOW_PATHS = new List<Curve>();
            DA.GetDataList(0, FLOW_PATHS);
            FLOW_PATHS.RemoveAll(curve => curve == null); // Remove null items; can be due to passing in the points not the path
            if (FLOW_PATHS.Count == 0)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error,
                    "No Flow Paths provided or they were provided as an inappropriate geometry.");
                return;
            }

            double START_VOLUME = 100;
            DA.GetData(1, ref START_VOLUME);
            if (START_VOLUME < 0)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Start volume must be a positive number.");
                return;
            }

            double SEGMENT_LOSS = 0.05;
            DA.GetData(2, ref SEGMENT_LOSS);

            // End initial variable setup



        }
    }
}